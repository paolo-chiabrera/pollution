{"version":3,"sources":["../../src/MeasurementsByCity/index.js"],"names":["mapStateToProps","measurementsByCity","selectedCountry","mapDispatchToProps","setMeasurementsByCity","dispatch","payload","getLatestMeasurements","axios","get","params","country","then","data","CONTEXT_TYPES","renderNothing","componentDidMount","props","channel","bind","EVENT_LATEST","componentDidUpdate","prevProps","unbind","componentWillUnmount"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB;AAAA,QAAGC,kBAAH,QAAGA,kBAAH;AAAA,QAAuBC,eAAvB,QAAuBA,eAAvB;AAAA,WAA8C;AAClED,8CADkE;AAElEC;AAFkE,KAA9C;AAAA,CAAxB;;AAKA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,WAAa;AACpCC,+BAAuB;AAAA,mBAAWC,SAAS,oCAAsBC,OAAtB,CAAT,CAAX;AAAA;AADa,KAAb;AAAA,CAA3B;;AAIA,IAAMC,wBAAwB,SAAxBA,qBAAwB,QAAuD;AAAA,QAApDC,KAAoD,SAApDA,KAAoD;AAAA,QAA7CN,eAA6C,SAA7CA,eAA6C;AAAA,QAA5BE,qBAA4B,SAA5BA,qBAA4B;;AACjF,WAAOI,MACFC,GADE,CACE,SADF,EACa;AACZC,gBAAQ;AACJC,qBAAST;AADL;AADI,KADb,EAMFU,IANE,CAMG;AAAA,YAAGC,IAAH,SAAGA,IAAH;AAAA,eAAcT,sBAAsBS,IAAtB,CAAd;AAAA,KANH,CAAP;AAOH,CARD;;kBAUe,wBACX,2BAAWC,wBAAX,CADW,EAEX,yBAAQd,eAAR,EAAyBG,kBAAzB,CAFW,EAGX,uBACI;AAAA,QAAGD,eAAH,SAAGA,eAAH;AAAA,WAAyB,CAAC,oBAASA,eAAT,CAAD,IAA8B,mBAAQA,eAAR,CAAvD;AAAA,CADJ,EAEIa,wBAFJ,CAHW,EAOX,0BAAU;AACNC,qBADM,+BACc;AAAA,qBACmD,KAAKC,KADxD;AAAA,YACRT,KADQ,UACRA,KADQ;AAAA,YACDU,OADC,UACDA,OADC;AAAA,YACQhB,eADR,UACQA,eADR;AAAA,YACyBE,qBADzB,UACyBA,qBADzB;;;AAGhBG,8BAAsB,EAAEC,YAAF,EAASN,gCAAT,EAA0BE,4CAA1B,EAAtB;;AAEAc,gBAAQC,IAAR,CAAgBC,wBAAhB,SAAgClB,eAAhC,EAAmD;AAAA,mBAAQE,sBAAsBS,IAAtB,CAAR;AAAA,SAAnD;AACH,KAPK;AAQNQ,sBARM,8BAQaC,SARb,EAQwB;AAAA,sBACyC,KAAKL,KAD9C;AAAA,YAClBT,KADkB,WAClBA,KADkB;AAAA,YACXU,OADW,WACXA,OADW;AAAA,YACFhB,eADE,WACFA,eADE;AAAA,YACeE,qBADf,WACeA,qBADf;;;AAG1B,YAAIF,oBAAoBoB,UAAUpB,eAAlC,EAAmD;AAC/CK,kCAAsB,EAAEC,YAAF,EAASN,gCAAT,EAA0BE,4CAA1B,EAAtB;;AAEAc,oBAAQK,MAAR,CAAkBH,wBAAlB,SAAkCE,UAAUpB,eAA5C;AACAgB,oBAAQC,IAAR,CAAgBC,wBAAhB,SAAgClB,eAAhC,EAAmD;AAAA,uBAAQE,sBAAsBS,IAAtB,CAAR;AAAA,aAAnD;AACH;AACJ,KAjBK;AAkBNW,wBAlBM,kCAkBiB;AAAA,sBACkB,KAAKP,KADvB;AAAA,YACXC,OADW,WACXA,OADW;AAAA,YACFhB,eADE,WACFA,eADE;;;AAGnBgB,gBAAQK,MAAR,CAAkBH,wBAAlB,SAAkClB,eAAlC;AACH;AAtBK,CAAV,CAPW,C","file":"index.js","sourcesContent":["import { isEmpty, isString } from 'lodash/core';\nimport { branch, compose, getContext, lifecycle, renderNothing } from 'recompose';\nimport { connect } from 'react-redux';\n\nimport { CONTEXT_TYPES } from '../constants';\n\nimport { setMeasurementsByCity } from './actions';\nimport { EVENT_LATEST } from './constants';\n\nconst mapStateToProps = ({ measurementsByCity, selectedCountry }) => ({\n    measurementsByCity,\n    selectedCountry,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setMeasurementsByCity: payload => dispatch(setMeasurementsByCity(payload)),\n});\n\nconst getLatestMeasurements = ({ axios, selectedCountry, setMeasurementsByCity }) => {\n    return axios\n        .get('/latest', {\n            params: {\n                country: selectedCountry,\n            },\n        })\n        .then(({ data }) => setMeasurementsByCity(data));\n};\n\nexport default compose(\n    getContext(CONTEXT_TYPES),\n    connect(mapStateToProps, mapDispatchToProps),\n    branch(\n        ({ selectedCountry }) => !isString(selectedCountry) || isEmpty(selectedCountry),\n        renderNothing,\n    ),\n    lifecycle({\n        componentDidMount() {\n            const { axios, channel, selectedCountry, setMeasurementsByCity } = this.props;\n\n            getLatestMeasurements({ axios, selectedCountry, setMeasurementsByCity });\n\n            channel.bind(`${EVENT_LATEST}-${selectedCountry}`, data => setMeasurementsByCity(data));\n        },\n        componentDidUpdate(prevProps) {\n            const { axios, channel, selectedCountry, setMeasurementsByCity } = this.props;\n\n            if (selectedCountry !== prevProps.selectedCountry) {\n                getLatestMeasurements({ axios, selectedCountry, setMeasurementsByCity });\n\n                channel.unbind(`${EVENT_LATEST}-${prevProps.selectedCountry}`);\n                channel.bind(`${EVENT_LATEST}-${selectedCountry}`, data => setMeasurementsByCity(data));\n            }\n        },\n        componentWillUnmount() {\n            const { channel, selectedCountry } = this.props;\n\n            channel.unbind(`${EVENT_LATEST}-${selectedCountry}`);\n        }\n    })\n);\n"]}