{"version":3,"sources":["../../src/CountriesList/index.js"],"names":["mapStateToProps","countries","selectedCountry","mapDispatchToProps","onSelect","dispatch","countryCode","setCountries","CONTEXT_TYPES","componentDidMount","props","axios","channel","get","then","data","bind","EVENT_COUNTRIES","componentDidUpdate","prevProps","code"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB;AAAA,QAAGC,SAAH,QAAGA,SAAH;AAAA,QAAcC,eAAd,QAAcA,eAAd;AAAA,WAAqC;AACzDD,4BADyD;AAEzDC;AAFyD,KAArC;AAAA,CAAxB;;AAKA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,WAAa;AACpCC,kBAAU;AAAA,mBAAeC,SAAS,iCAAmBC,WAAnB,CAAT,CAAf;AAAA,SAD0B;AAEpCC,sBAAc;AAAA,mBAAaF,SAAS,2BAAaJ,SAAb,CAAT,CAAb;AAAA;AAFsB,KAAb;AAAA,CAA3B;;kBAKe,wBACX,2BAAWO,wBAAX,CADW,EAEX,yBAAQR,eAAR,EAAyBG,kBAAzB,CAFW,EAGX,0BAAU;AACNM,qBADM,+BACc;AAAA,qBACyB,KAAKC,KAD9B;AAAA,YACRC,KADQ,UACRA,KADQ;AAAA,YACDC,OADC,UACDA,OADC;AAAA,YACQL,YADR,UACQA,YADR;;;AAGhBI,cACKE,GADL,CACS,YADT,EAEKC,IAFL,CAEU;AAAA,gBAAGC,IAAH,SAAGA,IAAH;AAAA,mBAAcR,aAAaQ,IAAb,CAAd;AAAA,SAFV;;AAIAH,gBAAQI,IAAR,CAAaC,2BAAb,EAA8B;AAAA,mBAAQV,aAAaQ,IAAb,CAAR;AAAA,SAA9B;AACH,KATK;AAUNG,sBAVM,8BAUaC,SAVb,EAUwB;AAAA,sBACuB,KAAKT,KAD5B;AAAA,YAClBT,SADkB,WAClBA,SADkB;AAAA,YACPG,QADO,WACPA,QADO;AAAA,YACGF,eADH,WACGA,eADH;;;AAG1B,YAAI,mBAAQD,SAAR,KAAsB,CAAC,mBAAQA,SAAR,CAAvB,IAA6C,mBAAQC,eAAR,CAAjD,EAA2E;AACvEE,qBAASH,UAAU,CAAV,EAAamB,IAAtB;AACH;AACJ;AAhBK,CAAV,CAHW,C","file":"index.js","sourcesContent":["import { isArray, isEmpty } from 'lodash/core';\nimport { compose, getContext, lifecycle } from 'recompose';\nimport { connect } from 'react-redux';\n\nimport { CONTEXT_TYPES } from '../constants';\n\nimport { setCountries, setSelectedCountry } from './actions';\nimport { EVENT_COUNTRIES } from './constants';\n\nconst mapStateToProps = ({ countries, selectedCountry }) => ({\n    countries,\n    selectedCountry,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSelect: countryCode => dispatch(setSelectedCountry(countryCode)),\n    setCountries: countries => dispatch(setCountries(countries)),\n});\n\nexport default compose(\n    getContext(CONTEXT_TYPES),\n    connect(mapStateToProps, mapDispatchToProps),\n    lifecycle({\n        componentDidMount() {\n            const { axios, channel, setCountries } = this.props;\n\n            axios\n                .get('/countries')\n                .then(({ data }) => setCountries(data));\n\n            channel.bind(EVENT_COUNTRIES, data => setCountries(data));\n        },\n        componentDidUpdate(prevProps) {\n            const { countries, onSelect, selectedCountry } = this.props;\n\n            if (isArray(countries) && !isEmpty(countries) && isEmpty(selectedCountry)) {\n                onSelect(countries[0].code);\n            }\n        },\n    })\n);\n"]}